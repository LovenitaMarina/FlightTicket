package training;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

//import org.testng.annotations.Test;

public class JStreams {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		ArrayList<String> names = new ArrayList<String>();
		names.add("Allan");
		names.add("Thimothy");
		names.add("Abigail");
		names.add("theodore");
		names.add("Aaron");

		// shopping list = 3 most important thing in it
		List<String> imp = Arrays.asList("Roti", "Kapda", "Makan", "gadi");

		List<String> shoppingList = new ArrayList<String>();
		shoppingList.add("Rice");
		shoppingList.add("flour");
		shoppingList.add("KAPda");
		shoppingList.add("Veges");
		shoppingList.add("Roti");
		shoppingList.add("fruits");
		shoppingList.add("eggs");
		shoppingList.add("makaN");

		// selecting imp items present in shopping list

		JStreams jS = new JStreams();
		// jS.stremFilter();
		jS.letsTryLamda(shoppingList, imp);
	}

	public void letsTryLamda(List<String> shoppingList, List<String> imp) {

//-- case sensitive check, will return only Roti
		shoppingList.stream().filter(imp::contains).forEach(sl -> System.out.println(sl));
		shoppingList.stream().filter(item1 -> imp.stream().anyMatch(item2 -> item1.equalsIgnoreCase(item2)))
				.forEach(sl -> System.out.println(sl));
//-- Ignorecase  check, will return only Roti	
		// List<String> commonElements =

		shoppingList.stream().filter(item1 -> imp.stream().anyMatch(item2 -> item1.equalsIgnoreCase(item2)))
				.collect(Collectors.toList()).forEach(sl -> System.out.print(sl + " "));

	}

	public void stremFilter() {
		ArrayList<String> names = new ArrayList<String>();
		names.add("Allan");
		names.add("Thimothy");
		names.add("Abigail");
		names.add("theodore");
		names.add("Aaron");
		long count = names.stream().filter(nm -> nm.startsWith("A")).count();
		System.out.println("In function " + count);
		long d = Stream.of("Abc", "AFG", "BVG", "AQW").filter(nm -> {
			nm.startsWith("A");
			return false;
		}).count();
		System.out.println("Testing function with explicit 'false' return " + d);

		names.stream().filter(nm -> nm.contains("Th")).forEach(nm -> System.out.println(nm));

		System.out.println("finish");
	}
}
